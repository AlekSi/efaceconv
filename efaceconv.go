package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

func main() {
	imports := make(map[string]bool)
	types := make(map[string]string)
	cur_dir, err := os.Open(".")
	if err != nil {
		panic(err)
	}
	defer cur_dir.Close()
	_, err = os.Stat("efaceconv_generated.go")
	if err == nil || err == os.ErrExist {
		os.Remove("efaceconv_generated.go")
	}
	files, err := cur_dir.Readdir(0)
	if err != nil {
		panic(err)
	}
	gen, err := os.Create("efaceconv_generated.go")
	if err != nil {
		panic(err)
	}
	defer gen.Close()
	rx, err := regexp.Compile(`\/\/ec\:[a-zA-Z\.\/0-9]*\:[a-zA-Z0-9\[\]]*\:[a-zA-Z0-9]*`)
	//    `\/\/ec\:[a-zA-Z\.\/0-9]*\:[a-zA-Z0-9\[\]]*\:[a-zA-Z0-9]*`)
	if err != nil {
		panic(err)
	}
	pk, err := regexp.Compile("package [a-zA-Z0-9]*")
	if err != nil {
		panic(err)
	}
	packageName := ""
	for _, file := range files {
		if filepath.Ext(file.Name()) == ".go" {
			srcBytes, err := ioutil.ReadFile(file.Name())
			if err != nil {
				panic(err)
			}
			src := string(srcBytes)
			packageName = pk.FindString(src)
			packageName = strings.Split(packageName, " ")[1]
			controls := rx.FindAllString(src, -1)
			for _, cn := range controls {
				data := strings.Split(cn, ":")
				imports[data[1]] = true
				types[data[2]] = data[3]
			}
		}
	}
	fmt.Fprintf(gen, "//generated by efaceconv DO NOT EDIT!\n")
	fmt.Fprintf(gen, "package %v\n\n", packageName)
	fmt.Fprintf(gen, "import (\n")
	for imp, _ := range imports {
		if imp != "" {
			fmt.Fprintf(gen, "  \"%v\"\n", imp)
		}
	}
	fmt.Fprintf(gen, "\"github.com/t0pep0/efaceconv/ecutils\"\n")
	fmt.Fprintf(gen, ")\n\n")

	fmt.Fprintf(gen, "var (\n")
	for _, name := range types {
		fmt.Fprintf(gen, "  _%vKind uintptr\n", name)
	}
	fmt.Fprintf(gen, ")\n\n")

	fmt.Fprintf(gen, "func init() {\n")
	for typ, name := range types {
		fmt.Fprintf(gen, " var s%v %v\n", name, typ)
		fmt.Fprintf(gen, "  _%vKind =  ecutils.GetKind(s%v)\n", name, name)
	}
	fmt.Fprintf(gen, "}\n\n")

	for typ, name := range types {
		fmt.Fprintf(gen, "func Eface2%v(arg interface{}) (*%v, bool) {\n", name, typ)
		fmt.Fprintf(gen, "  if ecutils.GetKind(arg) == _%vKind {\n", name)
		fmt.Fprintf(gen, "    return (*%v)(ecutils.GetDataPtr(arg)), true\n", typ)
		fmt.Fprintf(gen, "  }\n")
		fmt.Fprintf(gen, "  return nil, false\n")
		fmt.Fprintf(gen, "}\n\n")
	}

}
