//generated by efaceconv DO NOT EDIT!
package example

import (
  "reflect"
  "testing"
)


func TestEface2SByte(t *testing.T) {
  var SByte  []byte
	res, ok := Eface2SByte(SByte)
	if !ok {
		t.Error("Wrong type!")
	}
	if !reflect.DeepEqual(*res, SByte) {
		t.Error("Not equal")
	}
	_, ok = Eface2SByte(ok)
	if ok {
		t.Error("Wrong type!")
	}
}


func BenchmarkEface2SByte(b *testing.B) {
  var SByte []byte
	var v *[]byte
	var ok bool
	for n := 0; n < b.N; n++ {
		v, ok = Eface2SByte(SByte)
	}
	b.Log(v, ok) //For don't use compiler optimization
}

func _SByteClassic(arg interface{}) (v []byte, ok bool) {
	v, ok = arg.([]byte)
	return v, ok
}

func BenchmarkSByteClassic(b *testing.B) {
  var SByte []byte
  var v []byte
	var ok bool
	for n := 0; n < b.N; n++ {
		v, ok = _SByteClassic(SByte)
	}
	b.Log(v, ok) //For don't use compiler optimization
}



func TestEface2String(t *testing.T) {
  var String  string
	res, ok := Eface2String(String)
	if !ok {
		t.Error("Wrong type!")
	}
	if !reflect.DeepEqual(*res, String) {
		t.Error("Not equal")
	}
	_, ok = Eface2String(ok)
	if ok {
		t.Error("Wrong type!")
	}
}


func BenchmarkEface2String(b *testing.B) {
  var String string
	var v *string
	var ok bool
	for n := 0; n < b.N; n++ {
		v, ok = Eface2String(String)
	}
	b.Log(v, ok) //For don't use compiler optimization
}

func _StringClassic(arg interface{}) (v string, ok bool) {
	v, ok = arg.(string)
	return v, ok
}

func BenchmarkStringClassic(b *testing.B) {
  var String string
  var v string
	var ok bool
	for n := 0; n < b.N; n++ {
		v, ok = _StringClassic(String)
	}
	b.Log(v, ok) //For don't use compiler optimization
}



func TestEface2SInt(t *testing.T) {
  var SInt  []int
	res, ok := Eface2SInt(SInt)
	if !ok {
		t.Error("Wrong type!")
	}
	if !reflect.DeepEqual(*res, SInt) {
		t.Error("Not equal")
	}
	_, ok = Eface2SInt(ok)
	if ok {
		t.Error("Wrong type!")
	}
}


func BenchmarkEface2SInt(b *testing.B) {
  var SInt []int
	var v *[]int
	var ok bool
	for n := 0; n < b.N; n++ {
		v, ok = Eface2SInt(SInt)
	}
	b.Log(v, ok) //For don't use compiler optimization
}

func _SIntClassic(arg interface{}) (v []int, ok bool) {
	v, ok = arg.([]int)
	return v, ok
}

func BenchmarkSIntClassic(b *testing.B) {
  var SInt []int
  var v []int
	var ok bool
	for n := 0; n < b.N; n++ {
		v, ok = _SIntClassic(SInt)
	}
	b.Log(v, ok) //For don't use compiler optimization
}


